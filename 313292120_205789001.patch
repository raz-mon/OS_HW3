diff --git a/Makefile b/Makefile
index 328f9c6..79dd8b9 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/cas.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_check_stuff\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/cas.S b/kernel/cas.S
new file mode 100644
index 0000000..bbfd933
--- /dev/null
+++ b/kernel/cas.S
@@ -0,0 +1,14 @@
+.global cas
+    # a0 holds address of memory location
+    # a1 holds expected value
+    # a2 holds desired value
+    # a0 holds return value, 0 if successful, !0 otherwise
+cas:
+    lr.w t0, (a0)       # Load original value.
+    bne t0, a1, fail    # Doesn't match, so fail.
+    sc.w a0, a2, (a0)   # Try to update.
+    # li a0, 0            # Return value is a0.
+    jr ra               # Return 0, i.e., FALSE for sucess.
+fail:
+    li a0, 1            # Set return to failure. --> Returns 1 for failure (i.e., TRUE).
+    jr ra               # Return.
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..5c3dc77 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -104,6 +104,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            check_stuff(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -167,6 +168,7 @@ void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 uint64          walkaddr(pagetable_t, uint64);
+pte_t *         walk(pagetable_t pagetable, uint64 va, int alloc);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..59d48c8 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -11,6 +11,9 @@
 
 void freerange(void *pa_start, void *pa_end);
 
+int reference_remove(uint64 pa);
+extern uint64 cas(volatile void *add, int expected, int newval);
+
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
@@ -23,11 +26,18 @@ struct {
   struct run *freelist;
 } kmem;
 
+// TODO: Add CAS as we did in the last assignment.
+
+int references[NUM_PYS_PAGES];
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
   freerange(end, (void*)PHYSTOP);
+
+  // Added:
+  memset(references, 0, sizeof(int)*NUM_PYS_PAGES);
 }
 
 void
@@ -39,7 +49,7 @@ freerange(void *pa_start, void *pa_end)
     kfree(p);
 }
 
-// Free the page of physical memory pointed at by v,
+// Free the page of physical memory pointed at by v (should be pa),
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
 // initializing the allocator; see kinit above.)
@@ -51,6 +61,14 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  if (reference_remove((uint64)pa) > 0)     // Other pages are still pointing here (using the physical page).
+    return;
+
+  int old;
+  do{
+    old = references[PA_TO_IND(pa)];
+  } while(cas(&references[PA_TO_IND(pa)], old, 0));
+  
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -72,11 +90,48 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r){
+    int old;
+    do{
+      old = references[PA_TO_IND(r)];
+    } while(cas(&references[PA_TO_IND(r)], old, 1));
     kmem.freelist = r->next;
+  }
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+// Find the amount of references to a physical page in the main memory.
+int 
+reference_find(uint64 pa)
+{
+  // uint64 pa_d = PGROUNDDOWN(pa);
+  return references[PA_TO_IND(pa)];
+}
+
+// Add one to the reference count of physical page pa.
+int
+reference_add(uint64 pa)
+{
+  uint64 pa_d = PGROUNDDOWN(pa);
+  int old;
+  do{
+    old = references[PA_TO_IND(pa_d)];
+  } while (cas(&references[PA_TO_IND(pa_d)], old, old+1));
+  return references[PA_TO_IND(pa_d)];
+}
+
+// Decrease one from the reference count of the physical page pa.
+int
+reference_remove(uint64 pa)
+{
+  // uint64 pa_d = PGROUNDDOWN(pa);
+  int old;
+  do{
+    old = references[PA_TO_IND(pa)];
+  } while (cas(&references[PA_TO_IND(pa)], old, old-1));
+  return references[PA_TO_IND(pa)];
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..66510a1 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -26,6 +26,8 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+extern uint64 cas(volatile void *add, int expected, int newval);
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -596,6 +598,20 @@ kill(int pid)
   return -1;
 }
 
+void check_stuff(void){
+  int x = 5;
+  int temp;
+  printf("x=%d\n", x);
+  do{
+    temp = x;
+  } while (cas(&x, temp, 6));
+  printf("x=%d\n", x);
+  do{
+    temp = x;
+  } while (cas(&x, temp, 2));
+  printf("x=%d\n", x);
+}
+
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
@@ -654,3 +670,5 @@ procdump(void)
     printf("\n");
   }
 }
+
+
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..cd4f9f2 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -14,6 +14,8 @@ r_mhartid()
 #define MSTATUS_MPP_S (1L << 11)
 #define MSTATUS_MPP_U (0L << 11)
 #define MSTATUS_MIE (1L << 3)    // machine-mode interrupt enable.
+#define NUM_PYS_PAGES ((PHYSTOP-KERNBASE) / PGSIZE) // Number of physical pages.
+
 
 static inline uint64
 r_mstatus()
@@ -343,6 +345,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_COW (1L << 9) // copy-on-write
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
@@ -351,6 +354,8 @@ sfence_vma()
 
 #define PTE_FLAGS(pte) ((pte) & 0x3FF)
 
+#define PA_TO_IND(pa) (((uint64)pa - KERNBASE) / PGSIZE)    // Index of the page in the kernel memory (between KERNBASE and PHYSTOP).
+
 // extract the three 9-bit page table indices from a virtual address.
 #define PXMASK          0x1FF // 9 bits
 #define PXSHIFT(level)  (PGSHIFT+(9*(level)))
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..77fcfeb 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_check_stuff(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +128,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_check_stuff] sys_check_stuff
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..4fee9f2 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_check_stuff 22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..e421b48 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -95,3 +95,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_check_stuff(void)
+{
+  check_stuff();
+  return 1;
+}
+
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..c783f60 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -11,6 +11,10 @@ uint ticks;
 
 extern char trampoline[], uservec[], userret[];
 
+extern int cow_handle(pagetable_t pagetable, uint64 va);
+
+
+
 // in kernelvec.S, calls kerneltrap().
 void kernelvec();
 
@@ -65,6 +69,12 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if (r_scause() == 13 || r_scause() == 15) {
+
+    uint64 va = r_stval();
+    if (va >= p->sz || cow_handle(p->pagetable, va) != 0)
+      p->killed = 1;
+
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
@@ -218,3 +228,34 @@ devintr()
   }
 }
 
+// Handle a page-fault due to an unwritabble page tried to be writton on.
+int
+cow_handle(pagetable_t pagetable, uint64 va)
+{
+  va = PGROUNDDOWN(va);
+
+  if(va >= MAXVA)
+    return -1;
+
+  pte_t *pte;
+  if ((pte = walk(pagetable, va, 0)) == 0)
+    return -1;
+  if ((*pte & PTE_V) == 0)
+    return -1;  // Non-valid page.
+
+  if ((*pte & PTE_COW) == 0)
+    return 1;   // Not a COW page.
+
+  char *n_pa;
+  if ((n_pa = kalloc()) != 0) {
+    uint64 pa = PTE2PA(*pte);
+    memmove(n_pa, (char*)pa, PGSIZE);
+    *pte = PA2PTE(n_pa) | ((PTE_FLAGS(*pte) & ~PTE_COW) | PTE_W);
+    kfree((void*)pa);
+
+    return 0;
+  } else {
+    return -1;
+  }
+}
+
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..cbd05f3 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -15,6 +15,9 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+int reference_add(uint64 pa);
+int cow_handle(pagetable_t pagetable, uint64 va);
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -291,42 +294,39 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
-// Given a parent process's page table, copy
-// its memory into a child's page table.
-// Copies both the page table and the
-// physical memory.
-// returns 0 on success, -1 on failure.
-// frees any allocated pages on failure.
+
+// New implementation:
 int
 uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
   pte_t *pte;
-  uint64 pa, i;
-  uint flags;
-  char *mem;
+  uint64 va, pa;
 
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walk(old, i, 0)) == 0)
+  for (va = 0; va < sz; va += PGSIZE) {
+    
+    if ((pte = walk(old, va, 0)) == 0) 
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+
     pa = PTE2PA(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+
+    if (*pte & PTE_W)
+      *pte = (*pte | PTE_COW) & ~PTE_W;
+
+    if(mappages(new, va, PGSIZE, pa, (uint)PTE_FLAGS(*pte)) < 0)
       goto err;
-    }
+
+    reference_add(pa);
   }
   return 0;
 
- err:
-  uvmunmap(new, 0, i / PGSIZE, 1);
+  err:
+  uvmunmap(new, 0, va / PGSIZE, 1);
   return -1;
 }
 
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/check_stuff.c b/user/check_stuff.c
new file mode 100644
index 0000000..89faabc
--- /dev/null
+++ b/user/check_stuff.c
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  check_stuff();
+  exit(0);
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/user/user.h b/user/user.h
index b71ecda..94f34c7 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int check_stuff(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8bf6fee 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("check_stuff");
